// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// ApplyUser mocks base method.
func (m *MockUserRepository) ApplyUser(ctx context.Context, user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyUser indicates an expected call of ApplyUser.
func (mr *MockUserRepositoryMockRecorder) ApplyUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyUser", reflect.TypeOf((*MockUserRepository)(nil).ApplyUser), ctx, user)
}

// DeleteCookie mocks base method.
func (m *MockUserRepository) DeleteCookie(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCookie", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCookie indicates an expected call of DeleteCookie.
func (mr *MockUserRepositoryMockRecorder) DeleteCookie(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockUserRepository)(nil).DeleteCookie), ctx, username)
}

// GetUser mocks base method.
func (m *MockUserRepository) GetUser(ctx context.Context) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryMockRecorder) GetUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepository)(nil).GetUser), ctx)
}

// GetUserCookie mocks base method.
func (m *MockUserRepository) GetUserCookie(ctx context.Context, cookie string) (UserCookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCookie", ctx, cookie)
	ret0, _ := ret[0].(UserCookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCookie indicates an expected call of GetUserCookie.
func (mr *MockUserRepositoryMockRecorder) GetUserCookie(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCookie", reflect.TypeOf((*MockUserRepository)(nil).GetUserCookie), ctx, cookie)
}

// SetCookie mocks base method.
func (m *MockUserRepository) SetCookie(ctx context.Context, cookie UserCookie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCookie", ctx, cookie)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCookie indicates an expected call of SetCookie.
func (mr *MockUserRepositoryMockRecorder) SetCookie(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockUserRepository)(nil).SetCookie), ctx, cookie)
}
