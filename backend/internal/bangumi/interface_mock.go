// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package bangumi is a generated GoMock package.
package bangumi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriber is a mock of Subscriber interface.
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber.
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance.
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// ParseRSS mocks base method.
func (m *MockSubscriber) ParseRSS(ctx context.Context, rssLink string) (ParseRSSRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRSS", ctx, rssLink)
	ret0, _ := ret[0].(ParseRSSRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRSS indicates an expected call of ParseRSS.
func (mr *MockSubscriberMockRecorder) ParseRSS(ctx, rssLink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRSS", reflect.TypeOf((*MockSubscriber)(nil).ParseRSS), ctx, rssLink)
}

// Subscribe mocks base method.
func (m *MockSubscriber) Subscribe(ctx context.Context, req SubscribeReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubscriberMockRecorder) Subscribe(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubscriber)(nil).Subscribe), ctx, req)
}
