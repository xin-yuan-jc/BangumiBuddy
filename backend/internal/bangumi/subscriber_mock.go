// Code generated by MockGen. DO NOT EDIT.
// Source: subscriber.go

// Package bangumi is a generated GoMock package.
package bangumi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRSSParser is a mock of RSSParser interface.
type MockRSSParser struct {
	ctrl     *gomock.Controller
	recorder *MockRSSParserMockRecorder
}

// MockRSSParserMockRecorder is the mock recorder for MockRSSParser.
type MockRSSParserMockRecorder struct {
	mock *MockRSSParser
}

// NewMockRSSParser creates a new mock instance.
func NewMockRSSParser(ctrl *gomock.Controller) *MockRSSParser {
	mock := &MockRSSParser{ctrl: ctrl}
	mock.recorder = &MockRSSParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRSSParser) EXPECT() *MockRSSParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockRSSParser) Parse(ctx context.Context, link string) (RSS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, link)
	ret0, _ := ret[0].(RSS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockRSSParserMockRecorder) Parse(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockRSSParser)(nil).Parse), ctx, link)
}

// MockMetaParser is a mock of MetaParser interface.
type MockMetaParser struct {
	ctrl     *gomock.Controller
	recorder *MockMetaParserMockRecorder
}

// MockMetaParserMockRecorder is the mock recorder for MockMetaParser.
type MockMetaParserMockRecorder struct {
	mock *MockMetaParser
}

// NewMockMetaParser creates a new mock instance.
func NewMockMetaParser(ctrl *gomock.Controller) *MockMetaParser {
	mock := &MockMetaParser{ctrl: ctrl}
	mock.recorder = &MockMetaParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaParser) EXPECT() *MockMetaParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockMetaParser) Parse(ctx context.Context, id int) (Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, id)
	ret0, _ := ret[0].(Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockMetaParserMockRecorder) Parse(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockMetaParser)(nil).Parse), ctx, id)
}

// Search mocks base method.
func (m *MockMetaParser) Search(ctx context.Context, name string) (MetaBase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, name)
	ret0, _ := ret[0].(MetaBase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockMetaParserMockRecorder) Search(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockMetaParser)(nil).Search), ctx, name)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockRepository) Save(ctx context.Context, bangumi Bangumi) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, bangumi)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(ctx, bangumi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), ctx, bangumi)
}
